#!/bin/bash

# Function to create cluster and install Argo CD
install() {
	# Create K3D cluster
	echo "Creating K3D cluster..."
	k3d cluster create p3 --k3s-arg "--disable=traefik@server:0"

	# Configure kubectl
	echo "Configuring kubectl..."
	export KUBECONFIG=$(k3d kubeconfig write p3)
	kubectl cluster-info

	# Create namespaces
	echo "Creating namespaces..."
	kubectl create namespace argocd --dry-run=client -o yaml | kubectl apply -f -
	kubectl create namespace dev --dry-run=client -o yaml | kubectl apply -f -

	# Install Argo CD with validation disabled
	echo "Installing Argo CD..."
	kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml --validate=false

	# Wait for Argo CD to be ready
	echo "Waiting for Argo CD to be ready..."
	kubectl wait --for=condition=available deployment -l app.kubernetes.io/name=argocd-server -n argocd --timeout=300s

	# Get Argo CD admin password
	echo "Argo CD admin password:"
	kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d
	echo
}

# Function to delete and recreate cluster
reinstall() {
	uninstall
	install
}

# Function to delete cluster
uninstall() {
	# Check if cluster exists
	if k3d cluster list | grep -q p3; then
		echo "Deleting cluster p3..."
		k3d cluster delete p3
	else
		echo "Cluster p3 does not exist."
	fi
}

# Function to commit and push changes
git_commit_push() {
	echo "Committing and pushing changes to julesmuntz sub-repo..."
	# Get the current directory name to use as the sub-repo name
	SUB_REPO_NAME=julmuntz

	# Initialize Git if not already initialized
	if [ ! -d .git ]; then
		git init
		git branch -M master
	fi

	# Set remote (force update if it exists)
	git remote set-url origin https://github.com/julesmuntz/$SUB_REPO_NAME.git ||
		git remote add origin https://github.com/julesmuntz/$SUB_REPO_NAME.git

	# Stash any unstaged changes
	echo "Stashing any unstaged changes..."
	git stash

	# Pull changes with rebase strategy
	echo "Pulling latest changes with rebase..."
	git config pull.rebase true
	git pull origin master

	# Apply stashed changes if any
	echo "Applying stashed changes..."
	git stash pop || true

	# Add and commit changes
	git add .
	git commit -m "Update cluster configuration"

	# Push changes with force-with-lease if needed
	echo "Pushing changes..."
	git push origin master || {
		echo "Push rejected, trying force-with-lease..."
		git push --force-with-lease origin master
	}

	# Set default pull strategy to rebase for future operations
	git config pull.rebase true
}

# Main script logic
case "$1" in
install)
	install
	;;
reinstall)
	reinstall
	;;
uninstall)
	uninstall
	;;
git)
	git_commit_push
	;;
*)
	echo "Usage: $0 {install|reinstall|uninstall|git}"
	exit 1
	;;
esac

echo "Operation complete!"
